// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ganeshdipdumbare/scootin-aboot-journey/db (interfaces: DB)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/ganeshdipdumbare/scootin-aboot-journey/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// Disconnect mocks base method.
func (m *MockDB) Disconnect(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockDBMockRecorder) Disconnect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockDB)(nil).Disconnect), arg0)
}

// GetAllScooters mocks base method.
func (m *MockDB) GetAllScooters(arg0 context.Context) ([]domain.Scooter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllScooters", arg0)
	ret0, _ := ret[0].([]domain.Scooter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllScooters indicates an expected call of GetAllScooters.
func (mr *MockDBMockRecorder) GetAllScooters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllScooters", reflect.TypeOf((*MockDB)(nil).GetAllScooters), arg0)
}

// GetAllTripEvents mocks base method.
func (m *MockDB) GetAllTripEvents(arg0 context.Context) ([]domain.TripEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTripEvents", arg0)
	ret0, _ := ret[0].([]domain.TripEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTripEvents indicates an expected call of GetAllTripEvents.
func (mr *MockDBMockRecorder) GetAllTripEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTripEvents", reflect.TypeOf((*MockDB)(nil).GetAllTripEvents), arg0)
}

// GetAllUsers mocks base method.
func (m *MockDB) GetAllUsers(arg0 context.Context) ([]domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers", arg0)
	ret0, _ := ret[0].([]domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockDBMockRecorder) GetAllUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockDB)(nil).GetAllUsers), arg0)
}

// GetAvailableScootersWithinRadius mocks base method.
func (m *MockDB) GetAvailableScootersWithinRadius(arg0 context.Context, arg1 *domain.GeoLocation, arg2 int) ([]domain.Scooter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableScootersWithinRadius", arg0, arg1, arg2)
	ret0, _ := ret[0].([]domain.Scooter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableScootersWithinRadius indicates an expected call of GetAvailableScootersWithinRadius.
func (mr *MockDBMockRecorder) GetAvailableScootersWithinRadius(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableScootersWithinRadius", reflect.TypeOf((*MockDB)(nil).GetAvailableScootersWithinRadius), arg0, arg1, arg2)
}

// GetScooterByID mocks base method.
func (m *MockDB) GetScooterByID(arg0 context.Context, arg1 string) (*domain.Scooter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScooterByID", arg0, arg1)
	ret0, _ := ret[0].(*domain.Scooter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScooterByID indicates an expected call of GetScooterByID.
func (mr *MockDBMockRecorder) GetScooterByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScooterByID", reflect.TypeOf((*MockDB)(nil).GetScooterByID), arg0, arg1)
}

// InsertTripEvent mocks base method.
func (m *MockDB) InsertTripEvent(arg0 context.Context, arg1 *domain.TripEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTripEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTripEvent indicates an expected call of InsertTripEvent.
func (mr *MockDBMockRecorder) InsertTripEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTripEvent", reflect.TypeOf((*MockDB)(nil).InsertTripEvent), arg0, arg1)
}

// UpdateScooter mocks base method.
func (m *MockDB) UpdateScooter(arg0 context.Context, arg1 *domain.Scooter) (*domain.Scooter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScooter", arg0, arg1)
	ret0, _ := ret[0].(*domain.Scooter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateScooter indicates an expected call of UpdateScooter.
func (mr *MockDBMockRecorder) UpdateScooter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScooter", reflect.TypeOf((*MockDB)(nil).UpdateScooter), arg0, arg1)
}
